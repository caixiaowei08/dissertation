\chapter{永恒探索算法验证}
上一章节主要介绍了机器人移动算法相关的模型构建，具体以最小移动算法为研究对象，给出了半同步调度策略、完全同步调度策略和完全异步调度策略下的最小移动算法的模型实例。本章节中，在最小移动算法模型构建的基础上，对非冲撞性、非交换性和非终止性分别进行验证，并对实验结果进行分析。实验运行的系统环境为Windows 7 旗舰版，硬件环境为 CPU Intel Xeon(R) 3.40GHz,16G 内存。符号验证工具nuXmv的版本号为\verb|1.1.1|。对非冲撞性、非交换性和非终止性三条性质，实验设定环形空间位置结点个数分别为10，11，13，14，16和17的情况分别进行验证。同时验证了半同步调度策略、完全同步调度策略和完全异步调度策略下非冲撞性、非交换性和非终止性的验证结果和消耗时间。由于最小移动算法要求机器人个数与空间位置结点数互质，空间位置结点数为12和15的情况在实验中略去。


\section{非碰撞性验证}
\subsection{实验操作实例}
验证最小移动算法的在机器人任意初始位置时是否满足非碰撞性。下面是环形空间结点数为10时，最小移动算法的非碰撞性验证过程。

\paragraph{半同步调度策略}
半同步调度策略下，使用基于BDD的模型验证方式验证非碰撞性时，nuXmv模型验证器返回的验证结果为真。详细验证指令和输出结果如下：

\begin{lstlisting}
    syscmd>nuxmv -int ssync10.smv
    nuXmv > read_model
    nuXmv > flatten_hierarchy
    nuXmv > build_flat_model
    nuXmv > encode_variables
    nuXmv > check_ltlspec_inc_coi_bdd -I
    Using COI(0) variables
    Property ((((pos3 > pos2 & pos2 > pos1) | (pos1 > pos3 & pos3 > pos2)) | (pos2 > pos1 & pos1 > pos3)) -> ((( G ( F (r1.dispatcher = choose & r1.phase = lc)) &  G ( F (r2.dispatcher = choose & r2.phase = lc))) &  G ( F (r3.dispatcher = choose & r3.phase = lc))) ->  G ((pos1 != pos2 & pos2 != pos3) & pos1 != pos3)))  is true
\end{lstlisting}

\paragraph{完全同步调度策略}
完全同步调度策略下，选择使用基于BDD的模型验证方式验证非碰撞性，nuXmv模型验证器返回的验证结果为真。详细验证指令和输出结果如下：

\begin{lstlisting}
    syscmd>nuxmv -int fsync10.smv
    nuXmv > read_model
    nuXmv > flatten_hierarchy
    nuXmv > build_flat_model
    nuXmv > encode_variables
    nuXmv > check_ltlspec_inc_coi_bdd -I
    Using COI(0) variables
    Trace could not be completed.
    Counterexample is SPURIOUS at bound 0
    Using COI(1) variables
    Property ((((pos3 > pos2 & pos2 > pos1) | (pos1 > pos3 & pos3 > pos2)) | (pos2 > pos1 & pos1 > pos3)) ->  G ((pos1 != pos2 & pos2 != pos3) & pos1 != pos3))  is true
\end{lstlisting}

\paragraph{完全异步调度策略}
完全异步调度策略，选择使用基于SMT的模型验证方式验证非碰撞性，nuXmv模型验证器返回的验证结果为假。详细验证指令和输出结果如下：

\begin{lstlisting}
    syscmd>nuxmv -int async10.smv
    nuXmv > read_model
    nuXmv > flatten_hierarchy
    nuXmv > build_flat_model
    nuXmv > go_msat
    nuXmv > msat_check_ltlspec_inc_coi
    Using COI(0) variables
    ...
    Property ((((pos3 > pos2 & pos2 > pos1) | (pos1 > pos3 & pos3 > pos2)) | (pos2 > pos1 & pos1 > pos3)) ->  G ((pos1 != pos2 & pos2 != pos3) & pos1 != pos3))  is false
    as demonstrated by the following execution sequence
    Trace Description: Incremental COI counter-example
    Trace Type: Counterexample
      -> State: 3.1 <-
        pos1 = 1
        pos2 = 9
        pos3 = 10
        r1.phase = lc
        r1.move = 0
        r2.phase = lc
        r2.move = 0
        r3.phase = lc
        r3.move = 0
      -> Input: 3.2 <-
        _process_selector_ = r3
        running = FALSE
        r3.running = TRUE
        r2.running = FALSE
        r1.running = FALSE
      -> State: 3.2 <-
        r3.phase = m
        r3.move = -1
      -> Input: 3.3 <-
      Loop starts here
      -> State: 3.3 <-
        pos3 = 9
        r3.phase = lc
        r3.move = 0
      -> Input: 3.4 <-
        _process_selector_ = r2
        r3.running = FALSE
        r2.running = TRUE
     ...
\end{lstlisting}

完全异步调度策略下，当环形空间位置结点数为10时，最小移动算法不满足非碰撞性。从nuXmv输出结果中给出一个不满足非碰撞性的反例，状态3.1给出了机器人的初始位置为$pos1=1,pos2=9,pos3=10$ 。状态3.2时，在空间位置pos3上的机器人r3做出逆时针移动的决策，状态3.3时，机器人r3移动到了空间位置结点9，而机器人r2已经在空间位置$pos2=9$的位置上，所以机器人r3和r2发生碰撞。

\subsection{实验结果与分析}

表5.1中是最小移动算法非碰撞性的验证结果，符号$\circ$表示满足非碰撞性，$\times$表示不满足非碰撞性。从表中可以看出最小移动算法在半同步调度策略和完全同步调度策略下都满足非碰撞性，而在完全异步调度策略下都不满足非碰撞性。$\ast$表示采用SMT方法验证所需要的时间，而没有标注的时间表示采用BDD方法所需要的时间。

非碰撞性验证都可以在较短时间内完成，随着空间结点数的增加大部分验证所需时间也会有所增长。但是在某些情况下，随着空间结点数的增加相反验证所需时间也有所减少，例如空间位置结点数为16时，整体验证所需时间都减少了。

\begin{table}[hbt]
	\centering
	\caption{最小移动算法非碰撞性验证结果}
	\begin{tabular}{|c|c|c|c|c|c|c|}
		\hline
        \multirow{结点数}&\multicolumn{2}{c|}{半同步调度策略}&\multicolumn{2}{c|}{完全同步调度策略}&\multicolumn{2}{c|}{完全异步调度策略}\\
        \cline{2-7}
        &结果&耗时&结果&耗时&结果&耗时 \\
        \hline
          $10$&$\circ$&$0.7s$&$\circ$&$1.4s$&$\times$&$1.2s^\ast$ \\
        \hline
          $11$&$\circ$&$1.1s$&$\circ$&$5.4s$&$\times$&$9.3s^\ast$ \\
        \hline
          $13$&$\circ$&$1.1s$&$\circ$&$8.3s$&$\times$&$10.7s^\ast$ \\
        \hline
          $14$&$\circ$&$1.1s$&$\circ$&$8.9s$&$\times$&$9.7s^\ast$ \\
        \hline
          $16$&$\circ$&$0.6s&$\circ$&$1.2s$&$\times$&$4.9s^\ast$ \\
        \hline
          $17$&$\circ$&$2.0s$&$\circ$&$13.0s$&$\times$&$27.5s^\ast$\\
        \hline
	\end{tabular}
	\label{table:tablemincollision}
\end{table}


\section{非互换性验证}
表最小移动算法的非碰撞性，

\subsection{实验描述}
表最小移动算法的非碰撞性，


\paragraph{半同步调度策略}
半同步调度策略下，使用基于BDD的模型验证方式验证非碰撞性时，nuXmv模型验证器返回的验证结果为真。详细验证指令和输出结果如下：

\begin{lstlisting}
    syscmd>nuxmv -int ssync10.smv
    nuXmv > read_model
    nuXmv > flatten_hierarchy
    nuXmv > build_flat_model
    nuXmv > encode_variables
    nuXmv > check_ltlspec_inc_coi_bdd -I
    Using COI(0) variables
    Property ((((pos3 > pos2 & pos2 > pos1) | (pos1 > pos3 & pos3 > pos2)) | (pos2 > pos1 & pos1 > pos3)) -> ((( G ( F (r1.dispatcher = choose & r1.phase = lc)) &  G ( F (r2.dispatcher = choose & r2.phase = lc))) &  G ( F (r3.dispatcher = choose & r3.phase = lc))) ->  G ((pos1 + 1) mod 10 = pos2 -> (( X (pos2 + 1) mod 10 != pos1 & (pos2 + 1) mod 10 = pos3) -> (( X (pos3 + 1) mod 10 != pos2 & (pos3 + 1) mod 10 = pos1) ->  X (pos1 + 1) mod 10 != pos3)))))  is true
\end{lstlisting}

\paragraph{完全同步调度策略}
\begin{lstlisting}
    syscmd>nuxmv -int fsyncfull10_init.smv
    nuXmv > read_model
    nuXmv > flatten_hierarchy
    nuXmv > build_flat_model
    nuXmv > encode_variables
    nuXmv > check_ltlspec_inc_coi_bdd -I
    Using COI(0) variables
    Property ((((pos3 > pos2 & pos2 > pos1) | (pos1 > pos3 & pos3 > pos2)) | (pos2 > pos1 & pos1 > pos3)) ->  G ((pos1 + 1) mod 10 = pos2 -> (( X (pos2 + 1) mod 10 != pos1 & (pos2 + 1) mod 10 = pos3) -> (( X (pos3 + 1) mod 10 != pos2 & (pos3 + 1) mod 10 = pos1) ->  X (pos1 + 1) mod 10 != pos3))))  is true
\end{lstlisting}

\paragraph{完全异步调度策略}

\begin{lstlisting}
    syscmd>nuxmv -int async10.smv
    nuXmv > build_flat_model
    nuXmv > encode_variables
    nuXmv > check_ltlspec_inc_coi_bdd -I
    Using COI(0) variables
    Property ((((pos3 > pos2 & pos2 > pos1) | (pos1 > pos3 & pos3 > pos2)) | (pos2 > pos1 & pos1 > pos3)) ->  G ((pos1 + 1) mod 10 = pos2 -> (( X (pos2 + 1) mod 10 != pos1 & (pos2 + 1) mod 10 = pos3) -> (( X (pos3 + 1) mod 10 != pos2 & (pos3 + 1) mod 10 = pos1) ->  X (pos1 + 1) mod 10 != pos3))))  is true
\end{lstlisting}


\subsection{实验结果与分析}

\begin{table}[hbt]
	\centering
	\caption{最小移动算法非互换性验证结果}
	\begin{tabular}{|c|c|c|c|c|c|c|}
		\hline
        \multirow{结点数}&\multicolumn{2}{c|}{半同步调度策略}&\multicolumn{2}{c|}{完全同步调度策略}&\multicolumn{2}{c|}{完全异步调度策略}\\
        \cline{2-7}
        &结果&耗时&结果&耗时&结果&耗时 \\
        \hline
          $10$&$\circ$&$1.7s$&$\circ$&$1.9s$&$\circ$&$0.9s$ \\
        \hline
          $11$&$\circ$&$4.3s$&$\circ$&$4.3s$&$\circ$&$0.7s$ \\
        \hline
          $13$&$\circ$&$6.7s$&$\circ$&$6.8s$&$\circ$&$0.6s$ \\
        \hline
          $14$&$\circ$&$8.8s$&$\circ$&$8.4s$&$\circ$&$0.6s$ \\
        \hline
          $16$&$\circ$&$2.4s&$\circ$&$2.3s$&$\circ$&$0.7s$ \\
        \hline
          $17$&$\circ$&$12.2s$&$\circ$&$11.4s$&$\circ$&$0.6s$\\
        \hline
	\end{tabular}
	\label{table:tableminChecker}
\end{table}



\section{非终止性验证}

\subsection{实验描述}

\paragraph{半同步调度策略}
\begin{lstlisting}
   syscmd>nuxmv -int ssyncfull10.smv
   nuXmv > read_model
   nuXmv > flatten_hierarchy
   nuXmv > build_flat_model
   nuXmv > encode_variables
   nuXmv > check_ltlspec_inc_coi_bdd -I
   Using COI(0) variables
   Property ((((pos3 > pos2 & pos2 > pos1) | (pos1 > pos3 & pos3 > pos2)) | (pos2 > pos1 & pos1 > pos3)) -> ((( G ( F (r1.dispatcher = choose & r1.phase = lc)) &  G ( F (r2.dispatcher = choose & r2.phase = lc))) &  G ( F (r3.dispatcher = choose & r3.phase = lc))) -> ((((((((( G ( F pos1 = 1) &  G ( F pos1 = 2)) &  G ( F pos1 = 3)) &  G ( F pos1 = 4)) &  G ( F pos1 = 5)) &  G ( F pos1 = 6)) &  G ( F pos1 = 7)) &  G ( F pos1 = 8)) &  G ( F pos1 = 9)) &  G ( F pos1 = 10)))) ...  is true
\end{lstlisting}


\paragraph{完全同步调度策略}
\begin{lstlisting}
    syscmd>nuxmv -int fsync10.smv
    nuXmv > read_model
    nuXmv > flatten_hierarchy
    nuXmv > build_flat_model
    nuXmv > encode_variables
    nuXmv > check_ltlspec_inc_coi_bdd -I
    Using COI(0) variables
    Trace could not be completed.
    Counterexample is SPURIOUS at bound 0
    Using COI(1) variables
    Property  G ((((pos3 > pos2 & pos2 > pos1) | (pos1 > pos3 & pos3 > pos2)) | (pos2 > pos1 & pos1 > pos3)) -> ((((((((( G ( F pos1 = 1) &  G ( F pos1 = 2)) &  G ( F pos1 = 3)) &  G ( F pos1 = 4)) &  G ( F pos1 = 5)) &  G ( F pos1 = 6)) &  G ( F pos1 = 7)) &  G ( F pos1 = 8)) &  G ( F pos1 = 9)) &  G ( F pos1 = 10)))...  is true
\end{lstlisting}

\paragraph{完全异步调度策略}
syscmd>nuxmv -int async10.smv
nuXmv > read_model
nuXmv > flatten_hierarchy
nuXmv > build_flat_model
nuXmv > go_msat
nuXmv > msat_check_ltlspec_inc_coi -k 200

\begin{lstlisting}
Property ((((pos3 > pos2 & pos2 > pos1) | (pos1 > pos3 & pos3 > pos2)) | (pos2 > pos1 & pos1 > pos3)) -> ((( G ( F r1.running = TRUE) &  G ( F r2.running = TRUE)) &  G ( F r3.running = TRUE)) -> ((((((((( G ( F pos1 = 1) &  G ( F pos1 = 2)) &  G ( F pos1 = 3)) &  G ( F pos1 = 4)) &  G ( F pos1 = 5)) &  G ( F pos1 = 6)) &  G ( F pos1 = 7)) &  G ( F pos1 = 8)) &  G ( F pos1 = 9)) &  G ( F pos1 = 10)))) ... is false
as demonstrated by the following execution sequence
Trace Description: Incremental COI counter-example
Trace Type: Counterexample
   ...
   -> State: 3.1 <-
    pos1 = 8
    pos2 = 9
    pos3 = 7
    r1.phase = lc
    r1.move = 0
    r2.phase = lc
    r2.move = 0
    r3.phase = lc
    r3.move = 0
  -> Input: 3.2 <-
    _process_selector_ = r1
    running = FALSE
    r3.running = FALSE
    r2.running = FALSE
    r1.running = TRUE
  -> State: 3.2 <-
    r1.phase = m
    r1.move = 1
  -> Input: 3.3 <-
  -- Loop starts here
  -> State: 3.3 <-
    pos1 = 9
    r1.phase = lc
    r1.move = 0
  -> Input: 3.4 <-
  -> State: 3.4 <-
    r1.phase = m
  -> Input: 3.5 <-
    _process_selector_ = r3
    r3.running = TRUE
    r1.running = FALSE
    ...
\end{lstlisting}

\subsection{实验结果与分析}

\begin{table}[hbt]
	\centering
	\caption{最小移动算法非终止性验证结果}
	\begin{tabular}{|c|c|c|c|c|c|c|}
		\hline
        \multirow{结点数}&\multicolumn{2}{c|}{半同步调度策略}&\multicolumn{2}{c|}{完全同步调度策略}&\multicolumn{2}{c|}{完全异步调度策略}\\
        \cline{2-7}
        &结果&耗时&结果&耗时&结果&耗时 \\
        \hline
          $10$&$\circ$&$83.1s$&$\circ$&$484.0s$&$\times$&$14.7s^\ast$ \\
        \hline
          $11$&$\circ$&$723.1s$&$\circ$&$3181.1s$&$\times$&$18.1s^\ast$ \\
        \hline
          $13$&$\circ$&$63.9s^\star$&$\circ$&$42.4s^\star$&$\times$&$2.1s^\ast$ \\
        \hline
          $14$&$\circ$&$129.2s^\star$&$\circ$&$90.4s^\star $&$\times$&$48.8s^\ast$ \\
        \hline
          $16$&$\circ$&$389.2s^\star&$\circ$&$168.4s^\star$&$\times$&$19.6s^\ast$ \\
        \hline
          $17$&$\circ$&$562.3s^\star$&$\circ$&$315.7s^\star$&$\times$&$102.2s^\ast$\\
        \hline
	\end{tabular}
	\label{table:tableminChecker}
\end{table}



\section{本章小结}
本章详细列出了最小移动算法的永恒探索性质的实验结果，从实验结果中可以得出符号模型对移动机器人空间永恒探索算法验证的高效性。